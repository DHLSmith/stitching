Executed at 2024-07-18_14-51-36
seed=16
train_mnist_model=False
model_to_load='./results/2024-07-11_15-34-33_resnet18_mnist.weights'
train_stitch=True
stitch_train_epochs=10
synthetic_dataset_noise=0.1
================================================
Test the Trained Resnet18
Test Accuracy: 99.12 %
Confusion Matrix
tensor([[ 971,    0,    1,    1,    0,    4,    2,    0,    1,    0],
        [   0, 1130,    0,    2,    0,    0,    1,    0,    1,    1],
        [   2,    0, 1025,    1,    0,    0,    1,    3,    0,    0],
        [   0,    0,    1, 1007,    0,    1,    0,    0,    1,    0],
        [   0,    0,    0,    0,  978,    0,    0,    0,    0,    4],
        [   0,    0,    0,    4,    0,  886,    1,    0,    1,    0],
        [   1,    2,    0,    0,    3,    4,  944,    0,    4,    0],
        [   0,    4,    3,    1,    0,    1,    0, 1015,    1,    3],
        [   0,    0,    1,    1,    1,    1,    0,    0,  970,    0],
        [   0,    0,    0,    2,    5,   12,    0,    1,    3,  986]],
       dtype=torch.int32)
tensor(10000)
after layer 3, activations shape is torch.Size([10, 64, 7, 7])
Train the stitch to a top model cut after layer 3
Epoch 0, loss 227.09
Epoch 1, loss 3.82
Epoch 2, loss 2.09
Epoch 3, loss 1.39
Epoch 4, loss 1.19
Epoch 5, loss 1.04
Epoch 6, loss 0.90
Epoch 7, loss 0.82
Epoch 8, loss 0.64
Epoch 9, loss 0.67
**** Finished Training ****
Test the trained stitch
Test Accuracy: 100.00 %
Confusion Matrix
tensor([[1000,    0,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0, 1000,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0, 1000,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0, 1000,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0, 1000,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0, 1000,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0, 1000,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0, 1000,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0, 1000,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0,    0, 1000]],
       dtype=torch.int32)
===================================================================
after layer 4, activations shape is torch.Size([10, 64, 7, 7])
Train the stitch to a top model cut after layer 4
Epoch 0, loss 292.68
Epoch 1, loss 3.07
Epoch 2, loss 1.85
Epoch 3, loss 1.44
Epoch 4, loss 1.04
Epoch 5, loss 0.99
Epoch 6, loss 0.83
Epoch 7, loss 0.68
Epoch 8, loss 0.69
Epoch 9, loss 0.60
**** Finished Training ****
Test the trained stitch
Test Accuracy: 100.00 %
Confusion Matrix
tensor([[1000,    0,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0, 1000,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0, 1000,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0, 1000,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0, 1000,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0, 1000,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0, 1000,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0, 1000,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0, 1000,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0,    0, 1000]],
       dtype=torch.int32)
===================================================================
after layer 5, activations shape is torch.Size([10, 128, 4, 4])
Train the stitch to a top model cut after layer 5
Epoch 0, loss 89.33
Epoch 1, loss 2.18
Epoch 2, loss 1.48
Epoch 3, loss 1.05
Epoch 4, loss 0.86
Epoch 5, loss 0.74
Epoch 6, loss 0.60
Epoch 7, loss 0.54
Epoch 8, loss 0.49
Epoch 9, loss 0.50
**** Finished Training ****
Test the trained stitch
Test Accuracy: 100.00 %
Confusion Matrix
tensor([[1000,    0,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0, 1000,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0, 1000,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0, 1000,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0, 1000,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0, 1000,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0, 1000,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0, 1000,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0, 1000,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0,    0, 1000]],
       dtype=torch.int32)
===================================================================
after layer 6, activations shape is torch.Size([10, 256, 2, 2])
Train the stitch to a top model cut after layer 6
Epoch 0, loss 96.28
Epoch 1, loss 2.62
Epoch 2, loss 1.67
Epoch 3, loss 1.27
Epoch 4, loss 1.01
Epoch 5, loss 0.87
Epoch 6, loss 0.76
Epoch 7, loss 0.64
Epoch 8, loss 0.57
Epoch 9, loss 0.53
**** Finished Training ****
Test the trained stitch
Test Accuracy: 100.00 %
Confusion Matrix
tensor([[1000,    0,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0, 1000,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0, 1000,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0, 1000,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0, 1000,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0, 1000,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0, 1000,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0, 1000,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0, 1000,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0,    0, 1000]],
       dtype=torch.int32)
===================================================================
after layer 7, activations shape is torch.Size([10, 512, 1, 1])
Train the stitch to a top model cut after layer 7
Epoch 0, loss 44.62
Epoch 1, loss 1.36
Epoch 2, loss 0.91
Epoch 3, loss 0.68
Epoch 4, loss 0.56
Epoch 5, loss 0.49
Epoch 6, loss 0.44
Epoch 7, loss 0.40
Epoch 8, loss 0.37
Epoch 9, loss 0.35
**** Finished Training ****
Test the trained stitch
Test Accuracy: 100.00 %
Confusion Matrix
tensor([[1000,    0,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0, 1000,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0, 1000,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0, 1000,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0, 1000,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0, 1000,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0, 1000,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0, 1000,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0, 1000,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0,    0, 1000]],
       dtype=torch.int32)
===================================================================
after layer 8, activations shape is torch.Size([10, 512, 1, 1])
Train the stitch to a top model cut after layer 8
Epoch 0, loss 45.10
Epoch 1, loss 1.40
Epoch 2, loss 0.93
Epoch 3, loss 0.70
Epoch 4, loss 0.57
Epoch 5, loss 0.51
Epoch 6, loss 0.45
Epoch 7, loss 0.41
Epoch 8, loss 0.39
Epoch 9, loss 0.35
**** Finished Training ****
Test the trained stitch
Test Accuracy: 100.00 %
Confusion Matrix
tensor([[1000,    0,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0, 1000,    0,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0, 1000,    0,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0, 1000,    0,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0, 1000,    0,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0, 1000,    0,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0, 1000,    0,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0, 1000,    0,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0, 1000,    0],
        [   0,    0,    0,    0,    0,    0,    0,    0,    0, 1000]],
       dtype=torch.int32)
===================================================================
